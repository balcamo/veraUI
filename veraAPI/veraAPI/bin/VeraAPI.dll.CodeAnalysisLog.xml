<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\professional\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\bin\VeraAPI.dll">
   <Modules>
    <Module Name="veraapi.dll">
     <Namespaces>
      <Namespace Name="VeraAPI.Areas.HelpPage">
       <Types>
        <Type Name="HelpPageConfig" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Register(System.Web.Http.HttpConfiguration)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="VeraAPI.Areas.HelpPage.TextSample.#ctor(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="11" />
              </User>
             </Notes>
            </Message>
            <Message Id="bsonspec" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="12" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HelpPageConfigurationExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GenerateSamples(VeraAPI.Areas.HelpPage.Models.HelpPageApiModel,VeraAPI.Areas.HelpPage.HelpPageSampleGenerator)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="13" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HelpPageSampleGenerator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetSampleObject(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="14" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,VeraAPI.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection`1&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="Breaking" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="15" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SampleObjectFactories" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="Breaking" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="19" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryFormatJson(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="17" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryFormatXml(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="18" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="16" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ObjectGenerator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GenerateObject(System.Type,System.Collections.Generic.Dictionary`2&lt;System.Type,System.Object&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="21" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ObjectGenerator+SimpleTypeObjectGenerator" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#InitializeGenerators()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="ExcludedInSource" Created="2018-10-09 17:42:18Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z">
             <Notes>
              <User Name="[SuppressMessage]">
               <Note Id="20" />
              </User>
             </Notes>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="VeraAPI.Models.DataHandler">
       <Types>
        <Type Name="FormDataHandler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#InsertTravelAuth()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="FormDataHandler.cs" Line="142">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'FormDataHandler.InsertTravelAuth()' could contain the following variables 'this.dbName', 'tableName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFormTemplate()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="FormDataHandler.cs" Line="208">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'FormDataHandler.LoadFormTemplate()' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadTravelAuthForm()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="FormDataHandler.cs" Line="257">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'FormDataHandler.LoadTravelAuthForm()' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadUserTravelAuthForms(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="FormDataHandler.cs" Line="343">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'FormDataHandler.LoadUserTravelAuthForms(int)' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JobDataHandler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#InsertJob()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="JobDataHandler.cs" Line="41">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'JobDataHandler.InsertJob()' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadJobHeader(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="JobDataHandler.cs" Line="97">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'JobDataHandler.LoadJobHeader(int)' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UserDataHandler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetUserID(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="UserDataHandler.cs" Line="428">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'UserDataHandler.GetUserID(string)' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertUserSession(VeraAPI.Models.Security.UserSession)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="UserDataHandler.cs" Line="382">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'UserDataHandler.InsertUserSession(UserSession)' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadCompany()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="UserDataHandler.cs" Line="235">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'UserDataHandler.LoadCompany()' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadDepartment()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="UserDataHandler.cs" Line="189">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'UserDataHandler.LoadDepartment()' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadPosition()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="UserDataHandler.cs" Line="334">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'UserDataHandler.LoadPosition()' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadSecurityRoles()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="UserDataHandler.cs" Line="282">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'UserDataHandler.LoadSecurityRoles()' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadUserData(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="UserDataHandler.cs" Line="128">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'UserDataHandler.LoadUserData(int)' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadUserSession(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2018-10-09 17:42:18Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\thuff\Source\Repos\veraUI\veraAPI\veraAPI\Models\DataHandler" File="UserDataHandler.cs" Line="54">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'UserDataHandler.LoadUserSession(int)' could contain the following variables 'this.dbName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Notes>
  <User Name="[SuppressMessage]">
   <Note Id="11" Modified="2018-10-09 17:42:19Z">End users may choose to merge this string with existing localized resources.</Note>
   <Note Id="12" Modified="2018-10-09 17:42:19Z">Part of a URI.</Note>
   <Note Id="13" Modified="2018-10-09 17:42:19Z">The exception is recorded as ErrorMessages.</Note>
   <Note Id="14" Modified="2018-10-09 17:42:19Z">Even if all items in SampleObjectFactories throw, problem will be visible as missing sample.</Note>
   <Note Id="15" Modified="2018-10-09 17:42:19Z">This is only used in advanced scenarios.</Note>
   <Note Id="16" Modified="2018-10-09 17:42:19Z">The exception is recorded as InvalidSample.</Note>
   <Note Id="17" Modified="2018-10-09 17:42:19Z">Handling the failure by returning the original string.</Note>
   <Note Id="18" Modified="2018-10-09 17:42:19Z">Handling the failure by returning the original string.</Note>
   <Note Id="19" Modified="2018-10-09 17:42:19Z">This is an appropriate nesting of generic types</Note>
   <Note Id="20" Modified="2018-10-09 17:42:19Z">These are simple type factories and cannot be split up.</Note>
   <Note Id="21" Modified="2018-10-09 17:42:19Z">Here we just want to return null if anything goes wrong.</Note>
  </User>
 </Notes>
 <Rules>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
